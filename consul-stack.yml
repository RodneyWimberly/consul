###########################################################################################################
# Service Registry Stack
# HA Service discovery, health checks, load-balancing,
# DNS name lookup, routing intentions, KV store,
# DNS Server, Secret Store/Vault vers=4,
###########################################################################################################
version: "3.8"

volumes:
  data_volume:
  nfs_server_volume:
  nfs_client_volume:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nfs-server.service.consul,rw
      device: ":/data"

networks:
  admin_network:
    external: true

configs:
  common_config:
    file: /mnt/config/common.json
  client_config:
    file: /mnt/config/client.json
  server_config:
    file: /mnt/config/server.json

secrets:
  ca_file:
    file: /mnt/certs/ca.crt
  cert_file:
    file: /mnt/certs/cert.crt
  key_file:
    file: /mnt/certs/tls.key


x-consul:
  &consul-base
  image: consul:${CONSUL_VERSION:-latest}
  entrypoint: /usr/local/scripts/consul-entrypoint.sh
  command: agent
  configs:
    - source: common_config
      target: /consul/data/bootstrap/common.json
    - source: client_config
      target: /consul/data/bootstrap/client.json
    - source: server_config
      target: /consul/data/bootstrap/server.json
  secrets:
    - source: ca_file
      target: /consul/data/certs/ca.crt
    - source: cert_file
      target: /consul/data/certs/cert.crt
    - source: key_file
      target: /consul/data/certs/tls.key
  volumes:
    - data_volume:/consul/data
    - /var/run/docker.sock:/var/run/docker.sock
    - ${pwd}/scripts:/usr/local/scripts
    - type: volume
      source: nfs_client_volume
      target: /consul/bootstrap
      volume:
        nocopy: true
  env_file:
    - /mnt/scripts/consul.env
  #healthcheck:
    #test: ['CMD', '/bin/sh', '-c', 'curl -sfLo /dev/null http://127.0.0.1:8500/v1/health/node/$$HOSTNAME']
  deploy:
    endpoint_mode: dnsrr
    mode: global
    update_config:
      parallelism: 1
      delay: 10s
      order: stop-first

services:
  consul:
    << : *consul-base
    networks:
      admin_network:
        aliases:
          - consul.service.consul
    depends_on:
      - consul-bootstrapper

  consul-bootstrapper:
    << : *consul-base
    entrypoint: /usr/local/scripts/consul-bootstrapper-entrypoint.sh
    image: ${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}/consul-bootstrapper
    volumes:
      - data_volume:/consul/data
      - /mnt/backups:/usr/share/nginx/html:rw
      - /mnt/scripts:/usr/local/scripts
    networks:
      admin_network:
        aliases:
          - consul-bootstrapper.service.consul
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: none

  registrator:
    image: gliderlabs/registrator:master
    command: -internal consul://consul.service.consul:8500
    env_file:
      - /mnt/scripts/consul.env
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    networks:
      admin_network: {}
    deploy:
      mode: global

  nfs-server:
    image: itsthenetwork/nfs-server-alpine:12
    environment:
      - SHARED_DIRECTORY=/data
    volumes:
      - nfs_server_volume:/data
    cap_add:
      - ALL
    networks:
      admin_network:
        aliases:
          - nfs-server.service.consul
        ipv4_address: 192.168.100.4
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: any

  proxy:
    image: wernight/dante
    ports:
      - '1080:1080'
    networks:
      - admin_network
    deploy:
      replicas: 1

  jump-box:
    entrypoint: /usr/local/scripts/jump-box-entrypoint.sh
    image: alpine
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /mnt/backups:/usr/share/nginx/html:rw
    - /mnt/scripts:/usr/local/scripts
    networks:
      - admin_network
    deploy:
      replicas: 1
