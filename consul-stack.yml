###########################################################################################################
# Service Registry Stack
# HA Service discovery, health checks, load-balancing,
# DNS name lookup, routing intentions, KV store,
# DNS Server, Secret Store/Vault
###########################################################################################################
version: "3.8"

volumes:
  data_volume:

networks:
  admin_network:
    external: true

configs:
  consul_server_config:
    file: ./config/server-config.json
  consul_client_config:
    file: ./config/client-config.json

x-consul:
  &consul-default
  image: consul:latest
  command: agent
  volumes:
    - data_volume:/consul/data
    - ./scripts:/usr/local/scripts
  networks:
    admin_network:
      aliases:
        - consul.service.consul
  env_file:
    - ./scripts/consul.env
  environment:
    - NUM_OF_MGR_NODES
    - NODE_IP
    - NODE_ID
    - NODE_NAME
    - NODE_IS_MANAGER
  deploy:
    endpoint_mode: dnsrr
    mode: global
    placement:
      max_replicas_per_node: 1
    restart_policy:
      condition: none
    update_config:
      parallelism: 1
      delay: 10s
      order: stop-first

services:
  server:
    << : *consul-default
    entrypoint: /usr/local/scripts/server_setup.sh
    ports:
      - target: 8500
        published: 8500
        mode: host
      - target: 8501
        published: 8501
        mode: host
    configs:
      - source: consul_server_config
        target: /consul/data/server/config.json
    deploy:
      replicas: 1
      placement:
        constraints: [node.role ==  manager]

  client:
    << : *consul-default
    entrypoint: /usr/local/scripts/client_setup.sh
    depends_on:
      - server
    configs:
      - source: consul_client_config
        target: /consul/data/client/config.json
    deploy:
      placement:
        constraints: [node.role !=  manager]

  registrator:
    image: gliderlabs/registrator:master
    command: -internal consul://consul-server.service.consul:8500
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    networks:
      admin_network: {}
    deploy:
      mode: global
